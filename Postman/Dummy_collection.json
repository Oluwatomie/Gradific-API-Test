{
	"info": {
		"_postman_id": "5dd3c1d3-f49f-406e-95f6-e0629ce30d95",
		"name": "Stage 4-Dummy Json Automated API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42517904",
		"_collection_link": "https://hng12-projects.postman.co/workspace/HNG12~f24c47d3-c2a7-4a7b-a781-bedec708e767/collection/42517904-5dd3c1d3-f49f-406e-95f6-e0629ce30d95?action=share&source=collection_link&creator=42517904"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Validate login with valid credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*pm.sendRequest(\"https://dummyjson.com/users\", function (err, res) {\r",
									"    if (!err) {\r",
									"        let users = res.json().users;\r",
									"        let randomUser = users[Math.floor(Math.random() * users.length)];\r",
									"\r",
									"        pm.collectionVariables.set(\"username\", randomUser.username);\r",
									"        pm.collectionVariables.set(\"password\", \"password\"); // DummyJSON default password\r",
									"    } else {\r",
									"        console.log(\"Error fetching users:\", err);\r",
									"    }\r",
									"});\r",
									"*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate response status code\r",
									"/*pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});*/\r",
									"\r",
									"// Validate response status code\r",
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\t\"username\": \"emilys\",\r\n\t\"password\": \"emilyspass\",\r\n    \"expiresInMins\": 60\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "### Auth Login\n\nThis endpoint is used to authenticate a user and obtain an access token for subsequent API calls.\n\n#### Request Body\n\n- `username` (string): The username of the user.\n    \n- `password` (string): The password of the user.\n    \n- `expiresInMins` (number): The expiration time of the access token in minutes.\n    \n\n#### Response\n\nThe response of this request is a JSON object with the following properties:\n\n- `accessToken` (string): The access token for the authenticated user.\n    \n- `tokenType` (string): The type of token (e.g., \"Bearer\").\n    \n- `expiresIn` (number): The expiration time of the access token in seconds.\n    \n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"accessToken\": {\n            \"type\": \"string\"\n        },\n        \"tokenType\": {\n            \"type\": \"string\"\n        },\n        \"expiresIn\": {\n            \"type\": \"number\"\n        }\n    }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Validate login with invalid password fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"// Validate response status code\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(400); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 400.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\t\"username\": \"emilys\",\r\n\t\"password\": \"emilyspas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate login with invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Validate response status code\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(400); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 400.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\t\"username\": \"milys\",\r\n\t\"password\": \"emilyspass\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate login with empty username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"// Validate response status code\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(400); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 400.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\t\"username\": \"\",\r\n\t\"password\": \"emilyspass\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate login with empty password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"// Validate response status code\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(400); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 400.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\t\"username\": \"emilys\",\r\n\t\"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate login with empty credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"// Validate response status code\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(400); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 400.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\t\"username\": \"\",\r\n\t\"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate login with special characters in username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"// Validate response status code\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(400); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 400.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\t\"username\": \"@admin!!\",\r\n\t\"password\": \"0lelplR\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate login with SQL Injection attempt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"// Validate response status code\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(400); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 400.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\", \r\n    \"password\": \"'1'='1'\"\r\n    \r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate login with extremely long username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"// Validate response status code\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(400); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 400.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", \r\n    \"password\": \"0lelplR\"\r\n    \r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate login with missing Content-Type header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(400); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 400.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\t\"username\": \"emilys\",\r\n\t\"password\": \"emilyspass\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Validate the API returns a list of products with status 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code is 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate fetching a specific product by ID returns correct data.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code is 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/12",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"12"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate adding a new product successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code is 201 Created\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(201); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Chocolate Cookies 3\", \r\n    \"price\": 105, \r\n    \"stock\": 56\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate fetching newly added product by ID returns correct data.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code is 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/195",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"195"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validating updating an existing product.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code is 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"Creamy and delicious cookies, available in various sizes for a delightful treat.\",\r\n            \"category\": \"groceries\",\r\n            \"price\": 150,\r\n            \"discountPercentage\": 7.58,\r\n            \"rating\": 3.77,\r\n            \"stock\": 76\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/12",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"12"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validating deleting a product removes it successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code is 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate deleted product removed successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"// Validate response status code\r",
									"pm.test(\"Expected Status code is 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"15"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate requesting a non-existent product returns 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code is 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate API rejects product creation with missing fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code is 400 Bad Request\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(400); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stock\": 57\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate API handles special characters in product title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code is 201 Created\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(201); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"@#Product$%^&*()\", \r\n    \"price\": 100, \r\n    \"stock\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate updating a product with an extremely long title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code is 400 Bad Request\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(400); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"title\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/12",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"12"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate limit and skip products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code is 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products?limit=20&skip=20&select=title,price')",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "skip",
									"value": "20"
								},
								{
									"key": "select",
									"value": "title,price')"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate limit and skip products with non existing product ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code is 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products?limit=20&skip=200000000000000&select=title,price')",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "skip",
									"value": "200000000000000"
								},
								{
									"key": "select",
									"value": "title,price')"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Validate deleting a non-existent user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 404.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate deleting user by valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate fetch all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate creating a user with missing required fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 201 Created\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(201); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 201.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"age\": 25\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate creating a user with valid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 201 Created received\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(201); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 201.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"John\",\r\n    \"lastName\": \"Doe\",\r\n    \"email\": \"john.doe@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate fetching a user by valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/9",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate fetching a non-existent user returns 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 404.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/5000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"5000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Updating user details with valid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"firstName\": \"Isabella-Ethan\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/9",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate updating user with non-existent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 404.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"firstName\": \"Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate searching users with valid query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/search?q=John",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "John"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate searching users with no matches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/search?q=RandomName",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "RandomName"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate fetching user with negative ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 404.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/-5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"-5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate creating user with duplicate email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 409 Conflict\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(409); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 409.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"John\",\r\n    \"lastName\": \"Doe\",\r\n    \"email\": \"john.doe@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify fetching posts related to a user ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/15/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"15",
								"posts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Carts",
			"item": [
				{
					"name": "Validate retrieving all carts.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate fetching a cart by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/21",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"21"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate adding a new cart with valid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 201 Created\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(201); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 201.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 1,\r\n    \"products\": [\r\n        {\r\n            \"id\": 1,\r\n            \"quantity\": 2\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate fetching cart by non-existent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 404.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/55555",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"55555"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate creating cart with invalid product ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 400 Bad Request\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(400); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 400.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 1,\r\n    \"products\": [\r\n        {\r\n            \"id\": 99999999999999,\r\n            \"quantity\": 2\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate updating cart by adding a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"merge\": true, // this will include existing products in the cart\r\n    \"products\": [\r\n        {\r\n        \"id\": 109,\r\n        \"quantity\": 1\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/12",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"12"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate updating cart with non-existent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 404.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"merge\": true, // this will include existing products in the cart\r\n    \"products\": [\r\n        {\r\n        \"id\": 109,\r\n        \"quantity\": 1\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/999999999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"999999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate deleting cart by valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/35",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"35"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate deleting cart by non-existent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 404.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/35555555",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"35555555"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate fetching carts for a valid user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/user/13",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"user",
								"13"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate fetching carts for a non-existent user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 404.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carts/user/1333333333",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"user",
								"1333333333"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate creating cart with zero quantity product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 400 Bad Request\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(400); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 400.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 1,\r\n    \"products\": [\r\n        {\r\n            \"id\": 1,\r\n            \"quantity\": 0\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate updating cart with negative quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 400 Bad Request\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(400); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 400.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 1,\r\n    \"products\": [\r\n        {\r\n            \"id\": 2,\r\n            \"quantity\": -5\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate creating cart with large quantity of product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 400 Bad Request\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(400); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 400.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 1,\r\n    \"products\": [\r\n        {\r\n            \"id\": 1,\r\n            \"quantityr\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate fetching cart with invalid request method (POST)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 405 Method Not Allowed\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(405); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 405.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/carts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Recipes",
			"item": [
				{
					"name": "Validate adding new recipes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Tasty Fried Chicken\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/recipes/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"recipes",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate retrieving all recipes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/recipes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"recipes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate deleting non existing recipes with ID 1000000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 404.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/recipes/1000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"recipes",
								"1000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate adding new detail to a recipes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"Efo Riro\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/recipes/10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"recipes",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate adding new detail to an invalid recipes ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 404.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"Efo Riro\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/recipes/-10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"recipes",
								"-10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate deleting recipes by valid ID Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 404.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/recipes/-35",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"recipes",
								"-35"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "Validate retrieving all posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate retrieving posts by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/21",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"21"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate retrieving posts by invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 404.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/-21",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"-21"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate retrieving posts' by comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/3/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"3",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate retrieving invalid posts' by comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 404.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/0/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"0",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate adding new posts by valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 201 Created\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(201); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 201.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"I never in love with you now or ever.\",\r\n    \"userId\": 15\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate updating posts by valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"A journey of a thousand mile start with a step.\"\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/22",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"22"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate deleting posts by valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Validate adding new comment to a post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 201 Created\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(201); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 201.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This makes more sense to me!\",\r\n    \"postId\": 3,\r\n    \"userId\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate adding new comment to an invalid post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 404.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This makes more sense to me!\",\r\n    \"postId\": -3,\r\n    \"userId\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate adding new comment to a post using invalid user ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 404.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This makes more sense to me!\",\r\n    \"postId\": 3,\r\n    \"userId\": 999999999999\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate updating comment to a post using valid user ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"This makes more sense to me!\",\r\n    \"postId\": 3,\r\n    \"userId\": 9\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/9",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate updating comment with large character to a post using valid user ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 400 Bad Request\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(400); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 400.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"body\": \"\",\r\n    \"postId\": 3,\r\n    \"userId\": 9\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/9",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate deleting comments by valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/7",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate retrieving all comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate retrieving single comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/6",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate retrieving non existing comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 404.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/69000043",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"69000043"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Todos",
			"item": [
				{
					"name": "Validate retrieving all todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/todos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate retrieving random todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/todos/random",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"todos",
								"random"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate retrieving limited(2) random todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/todos/random/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"todos",
								"random",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate adding new todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 201 Created\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(201); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 201.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"todo\": \"Use DummyJSON in the project\",\r\n    \"completed\": \"true\",\r\n    \"userId\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/todos/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"todos",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate adding new todo with invalid key value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 400 Bad Request\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(400); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 400.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"todo\": \"Use DummyJSON in the project\",\r\n    \"completed\": \"nil\",\r\n    \"userId\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/todos/8",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"todos",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate updating existing todo with valid key value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"completed\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/todos/8",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"todos",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate deleting todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/todos/12",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"todos",
								"12"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Quotes",
			"item": [
				{
					"name": "Validate retrieving all quotes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/quotes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate retrieving single quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/quotes/4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"quotes",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate retrieving single random quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/quotes/random",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"quotes",
								"random"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate retrieving 10nos maximum random quotes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/quotes/random/10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"quotes",
								"random",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate retrieving quotes with 3limit and skip10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 200 OK\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(200); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 200.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/quotes?limit=3&skip=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"quotes"
							],
							"query": [
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "skip",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate retrieving quotes with large limit and large skip numbers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 404.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/quotes?limitskip=1000000000000000000000000000000000000000000000000000000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"quotes"
							],
							"query": [
								{
									"key": "limit",
									"value
								},
								{
									"key": "skip",
									"value": "1000000000000000000000000000000000000000000000000000000000000000"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Mock HTTP",
			"item": [
				{
					"name": "Validating Mock HTTP Responses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate response status code\r",
									"pm.test(\"Expected Status code 404 Not Found\", function () {\r",
									"    try {\r",
									"        pm.response.to.have.status(404); // Validate status code\r",
									"    } \r",
									"    catch (e) {\r",
									"        console.error(\"Error validating status code:\", e.message);\r",
									"        pm.expect.fail(\"Invalid status code received instead of status code 404.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"responseData = pm.response.json();\r",
									"\r",
									"//Validate Json Structure\r",
									"pm.test(\"Body is JSON\", function (){\r",
									"    let jsonData;\r",
									"    try{\r",
									"        jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an(\"object\").that.is.not.empty;\r",
									"    }\r",
									"    catch (e) {\r",
									"        pm.expect.fail(\"Respone.body.is.not.valid.JSON\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Ensure login is successful\r",
									"if (pm.response.status === 200) {  // Use pm.response.status instead of pm.response.code\r",
									"    pm.collectionVariables.set(\"accessToken\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    pm.collectionVariables.set(\"refreshToken\", responseData.refreshToken);\r",
									"    \r",
									"    console.log(\"Stored accessToken:\", responseData.accessToken); // Updated authtoken to accessToken\r",
									"    console.log(\"Stored refreshToken:\", responseData.refreshToken);\r",
									"} else {\r",
									"    console.log(\"Login failed. Response:\", responseData);\r",
									"}\r",
									"\r",
									"// ‚úÖ Validate Response Time\r",
									"/*pm.test(\"Response time is within limit\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Fixed: Ensure valid responseTime usage\r",
									"});*/\r",
									"\r",
									"pm.test(\"Response time is within limit\", function () {\r",
									"    try {\r",
									"        const maxResponseTime = 500; // Set the acceptable response time limit (in ms)\r",
									"        const actualResponseTime = pm.response.responseTime;\r",
									"\r",
									"        pm.expect(actualResponseTime)\r",
									"            .to.be.below(maxResponseTime, `‚ùå Test Failed: Response time ${actualResponseTime}ms exceeded the limit of ${maxResponseTime}ms.`);\r",
									"\r",
									"        console.log(`‚úÖ Success: Response time ${actualResponseTime}ms is within the limit of ${maxResponseTime}ms.`);\r",
									"    } \r",
									"    catch (error) {\r",
									"        console.error(\"üö® Error validating response time:\", error.message);\r",
									"        pm.expect.fail(\"Test execution failed due to an unexpected error.\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/http/404/Hello_Peter",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"http",
								"404",
								"Hello_Peter"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "jwt",
		"jwt": [
			{
				"key": "header",
				"value": "{{accessToken}}",
				"type": "string"
			},
			{
				"key": "algorithm",
				"value": "HS256",
				"type": "string"
			},
			{
				"key": "isSecretBase64Encoded",
				"value": false,
				"type": "boolean"
			},
			{
				"key": "payload",
				"value": "{}",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "headerPrefix",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "queryParamKey",
				"value": "token",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://dummyjson.com"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		}
	]
}